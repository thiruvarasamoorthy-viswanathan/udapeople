version: 2.1
orbs: 
  slack: circleci/slack@4.9.3
  aws-cli: circleci/aws-cli@3.0.0
commands:
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-1
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-1
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1           
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-1]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-1]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-1]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1             
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-1]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force  
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip      
      - run:
          name: backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name:  front-end infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople            
      - run:
          name: fetch ec2 ip and save it to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1        
  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['6b:00:a1:a9:dd:06:13:5f:68:25:e5:da:b4:e5:b5:43']
      - attach_workspace:
          at: ~/   
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1  
  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/   
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm install typescript
            npm --update install python3 npm
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: | 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then  
              curl https://kvdb.io/FEJ4bHsKjuCRp4TL67mPPd/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment            
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://3.226.47.111:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://3.226.47.111:3030" >> .env
            cat .env          
      - run:
          name: Build and Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm install webpack
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1     
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default        
      - add_ssh_keys:
          fingerprints: ['6b:00:a1:a9:dd:06:13:5f:68:25:e5:da:b4:e5:b5:43']      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version  
      - restore_cache:
          keys: ["backend-dist"]                     
      - run:
          name: Deploy Backend
          command: |
              cd backend
              npm i
              npm run build
              cp package* ./dist
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              mkdir .circleci/ansible/roles/deploy/files
              mv artifact.tar.gz .circleci/ansible/roles/deploy/files
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml    
      - destroy_environment
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1                                                                                                   
workflows:
  default:
    jobs:
#      - build-frontend:
#          context: slack-secrets
#      - build-backend:
#          context: slack-secrets      
#      - test-frontend:
#          requires: [build-frontend]
#          context: slack-secrets          
#      - test-backend:
#          requires: [build-backend]
#          context: slack-secrets         
#      - scan-frontend:
#          requires: [build-frontend]
#          context: slack-secrets          
#      - scan-backend:
#          requires: [build-backend]       
#          context: slack-secrets
      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: slack-secrets    
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
          context: slack-secrets
      - run-migrations:
          requires: [configure-infrastructure]
          context: slack-secrets          
      - deploy-frontend:
          requires: [run-migrations]
          context: slack-secrets          
      - deploy-backend:
          requires: [run-migrations]
          context: slack-secrets                                                     